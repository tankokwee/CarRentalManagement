@page "/vehicles/create"
@using Microsoft.EntityFrameworkCore
@using CarRentalManagement.Domain
@inject IDbContextFactory<CarRentalManagement.Data.CarRentalManagementContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Vehicle</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Vehicle" OnValidSubmit="AddVehicle" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="year" class="form-label">Year:</label> 
                <InputNumber id="year" @bind-Value="Vehicle.Year" class="form-control" /> 
                <ValidationMessage For="() => Vehicle.Year" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="licenseplatenumber" class="form-label">LicensePlateNumber:</label> 
                <InputText id="licenseplatenumber" @bind-Value="Vehicle.LicensePlateNumber" class="form-control" /> 
                <ValidationMessage For="() => Vehicle.LicensePlateNumber" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="makeid" class="form-label">Make:</label> 
                <InputSelect id="makeid" @bind-Value="Vehicle.MakeId" class="form-control">
                    <option value="">-- Select Make --</option>
                    @if (Makes != null)
                    {
                        foreach (var make in Makes)
                        {
                            <option value="@make.Id">@make.Name</option>
                        }
                    }
                </InputSelect>
                @* <label for="makeid" class="form-label">MakeId:</label> *@
                @* <InputNumber id="makeid" @bind-Value="Vehicle.MakeId" class="form-control" /> *@
            </div>        
            <div class="mb-3">
                <label for="modelid" class="form-label">Model:</label> 
                <InputSelect id="modelid" @bind-Value="Vehicle.ModelId" class="form-control">
                    <option value="">-- Select Model --</option>
                    @if (Models != null)
                    {
                        foreach (var model in Models)
                        {
                            <option value="@model.Id">@model.Name</option>
                        }
                    }
                </InputSelect>
                @* <label for="modelid" class="form-label">ModelId:</label> *@
                @* <InputNumber id="modelid" @bind-Value="Vehicle.ModelId" class="form-control" /> *@
            </div>        
            <div class="mb-3">
                <label for="colourid" class="form-label">Colour:</label> 
                <InputSelect id="colourid" @bind-Value="Vehicle.ColourId" class="form-control">
                    <option value="">-- Select Colour --</option>
                    @if (Colours != null)
                    {
                        foreach (var colour in Colours)
                        {
                            <option value="@colour.Id">@colour.Name</option>
                        }
                    }
                </InputSelect>
                @* <label for=“colourid" class="form-label">ColourId:</label> *@
                @* <InputNumber id=“colourid" @bind-Value="Vehicle.ColourId" class="form-control" /> *@
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Vehicle.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Vehicle.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Vehicle.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Vehicle.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Vehicle.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Vehicle.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Vehicle.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Vehicle.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/vehicles">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Vehicle Vehicle { get; set; } = new();

    //Declare and initialize CarRentalManagementContext and IList
    private CarRentalManagementContext context = default!;
    private IList<Make> Makes;
    private IList<Model> Models;
    private IList<Colour> Colours;
    //OnInitialized method to get all Makes, Models and Colours
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        Makes = context.Make.ToList();
        Models = context.Model.ToList();
        Colours = context.Colour.ToList();
    }


    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddVehicle()
    {
        using var context = DbFactory.CreateDbContext();
        context.Vehicle.Add(Vehicle);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/vehicles");
    }
}
